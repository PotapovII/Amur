//---------------------------------------------------------------------------
//                          ПРОЕКТ  "River"
//              создано  :   17.09.2021 Потапов И.И.
//---------------------------------------------------------------------------
//                          27.12.2024 Потапов И.И.
//                      Сбока No Property River Lib
//              с убранными из наследников Property классами 
//---------------------------------------------------------------------------
namespace NPRiverLib.ABaseTask
{
    using System;

    using MeshLib;
    using MemLogLib;
    using CommonLib;
    using GeometryLib;
    using CommonLib.ChannelProcess;
    using MeshGeneratorsLib.TapeGenerator;
    /// <summary>
    ///  ОО: Эмуляция задачи по размыву дна под трубой, с выводом
    ///  экспериментальных форм дна
    /// </summary>
    [Serializable]
    public class RiverEmpty1XDCircle : ARiverAnyEmpty<RiverEmptyParamsCircle>, IRiver
    {
        double RC = 0.05;
        double[] Eta = null;
        /// <summary>
        ///  Сетка для расчета донных деформаций
        /// </summary>
        public override IMesh BedMesh() { return new TwoMesh(x, zeta0); }
        /// <summary>
        /// координаты дна по оси х
        /// </summary>
        protected double[] x = null;
        /// <summary>
        /// Экспериментальное поле данных
        /// </summary>
        Field3D pole = null;
        int NNb = 100;
        double[] Velosity = null;
        /// <summary>
        /// геометрия цилиндра
        /// </summary>
        double[] fxB = null, fyB = null;
        #region Данные
        /// <summary>
        /// экспериментальная форма дна - координата Х
        /// </summary>
        double[] _x = { -0.98065, -0.96131, -0.94196, -0.92261, -0.90327, -0.88392, -0.86457, -0.84523, -0.82588, -0.80653, -0.78719,
            -0.76784, -0.74849, -0.72915, -0.70980, -0.69045, -0.67111, -0.65176, -0.63241, -0.61307, -0.59372, -0.57437, -0.55503, -0.53568,
                -0.51633, -0.49698, -0.47764, -0.45829, -0.43894, -0.41960, -0.40025, -0.38090, -0.36156, -0.34221, -0.32286, -0.30352, -0.28417,
                -0.26482, -0.24548, -0.22613, -0.20678, -0.18744, -0.16809, -0.14874, -0.12940, -0.11005, -0.09070, -0.07136, -0.05201, -0.03266,
                -0.01332, 0.00603, 0.02538, 0.04472, 0.06407, 0.08342, 0.10276, 0.12211, 0.14146, 0.16080, 0.18015, 0.19950, 0.21884, 0.23819,
                0.25754, 0.27688, 0.29623, 0.31558, 0.33492, 0.35427, 0.37362, 0.39296, 0.41231, 0.43166, 0.45101, 0.47035, 0.48970, 0.50905,
                0.52839, 0.54774, 0.56709, 0.58643, 0.60578, 0.62513, 0.64447, 0.66382, 0.68317, 0.70251, 0.72186, 0.74121, 0.76055, 0.77990,
                0.79925, 0.81859, 0.83794, 0.85729, 0.87663, 0.89598, 0.91533, 0.93467, 0.95402, 0.97337, 0.99271, 1.01206, 1.03141, 1.05075,
                1.07010, 1.08945, 1.10879, 1.12814, 1.14749, 1.16683, 1.18618, 1.20553, 1.22487, 1.24422, 1.26357, 1.28291, 1.30226, 1.32161,
                1.34095, 1.36030, 1.37965, 1.39899, 1.41834, 1.43769, 1.45704, 1.47638, 1.49573, 1.51508, 1.53442, 1.55377, 1.57312, 1.59246,
                1.61181, 1.63116, 1.65050, 1.66985, 1.68920, 1.70854, 1.72789, 1.74724, 1.76658, 1.78593, 1.80528, 1.82462, 1.84397, 1.86332,
                1.88266, 1.90201, 1.92136, 1.94070, 1.96005, 1.97940, 1.99874, 2.01809, 2.03744, 2.05678, 2.07613, 2.09548, 2.11482, 2.13417,
                2.15352, 2.17286, 2.19221, 2.21156, 2.23090, 2.25025, 2.26960, 2.28894, 2.30829, 2.32764, 2.34698, 2.36633, 2.38568, 2.40503,
                2.42437, 2.44372, 2.46307, 2.48241, 2.50176, 2.52111, 2.54045, 2.55980, 2.57915, 2.59849, 2.61784, 2.63719, 2.65653, 2.67588,
                2.69523, 2.71457, 2.73392, 2.75327, 2.77261, 2.79196, 2.81131, 2.83065, 2.85000 };
        /// <summary>
        /// экспериментальная форма дна в 0 сек - координата Z
        /// </summary>
        double[] _z0 = { 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, -0.00620, -0.00947, -0.00986, -0.00791, -0.00218, 0.00407,
                0.00846, 0.00994, 0.00844, 0.00339, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000  };

        /// <summary>
        /// экспериментальная форма дна в 90 сек - координата Z
        /// </summary>
        double[] _z90 = { 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, -0.00055, -0.00205, -0.00492, -0.01176, -0.01945, -0.02800, -0.03644, -0.04257, -0.04545, -0.04338, -0.03834,
                -0.02649, -0.01374, -0.00134, 0.01068, 0.02259, 0.03449, 0.04096, 0.03707, 0.02726, 0.01676, 0.00926, 0.00399, 0.00022, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000 };
        /// <summary>
        /// экспериментальная форма дна в 150 сек - координата Z
        /// </summary>
        double[] _z150 = { 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, -0.00065, -0.00182, -0.00463, -0.00962, -0.01922, -0.02765, -0.03570, -0.04360, -0.04741, -0.04982, -0.04726, -0.04191,
                -0.03330, -0.02407, -0.01146, 0.00169, 0.01330, 0.02475, 0.03453, 0.04381, 0.05223, 0.05405, 0.05115, 0.03788, 0.02364, 0.01532,
                0.01056, 0.00628, 0.00246, 0.00135, 0.00036, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000 };
        /// <summary>
        /// экспериментальная форма дна в 300 сек - координата Z
        /// </summary>

        double[] _z300 = { 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
            0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00002, 0.00007,
            0.00013, 0.00019, 0.00026, 0.00032, 0.00038, 0.00044, 0.00050, 0.00056, 0.00063, 0.00069, 0.00075, 0.00113, 0.00223, 0.00088,
            -0.00130, -0.00429, -0.00755, -0.01169, -0.02016, -0.02965, -0.03887, -0.04729, -0.05376, -0.05624, -0.05697, -0.05366, -0.04793,
            -0.04069, -0.03127, -0.02138, -0.00971, 0.00323, 0.01327, 0.02499, 0.03470, 0.04172, 0.04570, 0.04795, 0.04928, 0.04973, 0.04788,
            0.04232, 0.03436, 0.02510, 0.01532, 0.00628, 0.00125, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
            0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
            0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
            0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
            0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
            0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
            0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
            0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
            0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
            0.00000, 0.00000, 0.00000, 0.00000, 0.00000 };

        double[] _time = { 0, 90, 150, 300 };
        double[] tau_0 = { 1.00672, 1.00122, 0.99233, 0.98376, 0.97551,
                0.96745, 0.95956, 0.95185, 0.94430, 0.93691, 0.92963, 0.92243, 0.91530, 0.90820, 0.90111, 0.89399, 0.88680, 0.87953, 0.87210,
                0.86454, 0.85667, 0.84869, 0.84017, 0.83139, 0.82218, 0.81219, 0.80172, 0.79058, 0.77816, 0.76474, 0.75017, 0.73415, 0.71633,
                0.69618, 0.67342, 0.64762, 0.61809, 0.58373, 0.54392, 0.49793, 0.44497, 0.38269, 0.31377, 0.23903, 0.16599, 0.10921, 0.08704,
                0.13803, 0.54287, 1.32038, 2.84452, 3.78264, 2.79188, 2.25562, 2.51577, 2.32952, 2.19458, 1.94391, 1.47660, 1.10168, 1.21051,
                1.16651, 1.08109, 0.98360, 0.87733, 0.76566, 0.65416, 0.54947, 0.45653, 0.37637, 0.31048, 0.25595, 0.21175, 0.17573, 0.14923,
                0.12993, 0.11593, 0.10704, 0.10283, 0.10256, 0.10695, 0.11311, 0.12069, 0.13012, 0.14121, 0.15307, 0.16621, 0.17978, 0.19382,
                0.20812, 0.22254, 0.23690, 0.25125, 0.26513, 0.27887, 0.29220, 0.30531, 0.31817, 0.33063, 0.34310, 0.35465, 0.36621, 0.37724,
                0.38771, 0.39817, 0.40775, 0.41712, 0.42649, 0.43478, 0.44306, 0.45133, 0.45855, 0.46576, 0.47298, 0.47933, 0.48551, 0.49168,
                0.49742, 0.50267, 0.50792, 0.51317, 0.51767, 0.52210, 0.52653, 0.53084, 0.53457, 0.53830, 0.54204, 0.54563, 0.54872, 0.55180,
                0.55489, 0.55797, 0.56053, 0.56308, 0.56564, 0.56819, 0.57048, 0.57254, 0.57461, 0.57667, 0.57874, 0.58048, 0.58216, 0.58385,
                0.58553, 0.58722, 0.58859, 0.58992, 0.59124, 0.59257, 0.59389, 0.59506, 0.59612, 0.59718, 0.59824, 0.59930, 0.60036, 0.60116,
                0.60196, 0.60276, 0.60356, 0.60436, 0.60514, 0.60576, 0.60638, 0.60700, 0.60762, 0.60824, 0.60886, 0.60933, 0.60977, 0.61022,
                0.61066, 0.61111, 0.61155, 0.61196, 0.61225, 0.61255, 0.61284, 0.61313, 0.61343, 0.61372, 0.61402, 0.61432, 0.61462, 0.61492,
                0.61522, 0.61552, 0.61582, 0.61612, 0.61611, 0.61604, 0.61597, 0.61590, 0.61583, 0.61576, 0.61569, 0.61562 };

        double[] tau_90 = { 1.00357, 0.99936, 0.99149, 0.98406, 0.97686,
                0.96980, 0.96287, 0.95619, 0.94952, 0.94302, 0.93662, 0.93026, 0.92412, 0.91788, 0.91197, 0.90583, 0.90004, 0.89396, 0.88820,
                0.88216, 0.87627, 0.87025, 0.86409, 0.85801, 0.85157, 0.84500, 0.83834, 0.83139, 0.82408, 0.81646, 0.80848, 0.80004, 0.79103,
                0.78133, 0.77078, 0.75944, 0.74753, 0.73471, 0.72419, 0.71521, 0.71285, 0.72867, 0.73947, 0.71161, 0.73591, 0.50221, 0.44573,
                0.44017, 0.45913, 0.48481, 0.51662, 0.70583, 0.77272, 1.32237, 1.68701, 1.75066, 1.87834, 1.79414, 2.16984, 2.60074, -0.26449,
                -0.13009, -0.12102, -0.14181, -0.19414, -0.23327, -0.32201, -0.39364, -0.44231, -0.47375, -0.47508, -0.44828, -0.39486, -0.32194,
                -0.23094, -0.14065, -0.05099, 0.02884, 0.10389, 0.16633, 0.21772, 0.26768, 0.29776, 0.32785, 0.35485, 0.37121, 0.38758, 0.40395,
                0.41301, 0.42170, 0.43038, 0.43836, 0.44303, 0.44770, 0.45237, 0.45704, 0.46018, 0.46301, 0.46583, 0.46866, 0.47148, 0.47364,
                0.47564, 0.47765, 0.47966, 0.48167, 0.48366, 0.48539, 0.48712, 0.48885, 0.49058, 0.49231, 0.49404, 0.49572, 0.49731, 0.49890,
                0.50049, 0.50208, 0.50367, 0.50527, 0.50686, 0.50837, 0.50986, 0.51134, 0.51283, 0.51431, 0.51580, 0.51729, 0.51877, 0.52026,
                0.52158, 0.52289, 0.52420, 0.52551, 0.52682, 0.52813, 0.52944, 0.53075, 0.53206, 0.53337, 0.53456, 0.53569, 0.53683, 0.53797,
                0.53910, 0.54024, 0.54137, 0.54251, 0.54365, 0.54478, 0.54592, 0.54705, 0.54790, 0.54875, 0.54960, 0.55045, 0.55130, 0.55215,
                0.55300, 0.55385, 0.55469, 0.55554, 0.55639, 0.55724, 0.55809, 0.55887, 0.55957, 0.56027, 0.56097, 0.56167, 0.56238, 0.56308,
                0.56378, 0.56448, 0.56519, 0.56589, 0.56659, 0.56729, 0.56799, 0.56870, 0.56940, 0.56978, 0.57014, 0.57050, 0.57086, 0.57122,
                0.57158, 0.57194, 0.57230, 0.57266, 0.57302, 0.57338, 0.57374, 0.57410, 0.57446, 0.57482, 0.57518, 0.57554, 0.57590 };


        double[] tau_150 = { 1.00495, 1.00085, 0.99284, 0.98488, 0.97757,
                0.97066, 0.96386, 0.95732, 0.95084, 0.94448, 0.93824, 0.93204, 0.92606, 0.92002, 0.91422, 0.90835, 0.90268, 0.89692, 0.89136,
                0.88561, 0.88010, 0.87436, 0.86872, 0.86300, 0.85709, 0.85129, 0.84531, 0.83908, 0.83274, 0.82626, 0.81957, 0.81264, 0.80547,
                0.79817, 0.79081, 0.78361, 0.77698, 0.77203, 0.76998, 0.77467, 0.79832, 0.82034, 0.80656, 0.78342, 0.71517, 0.34237, 0.35975,
                0.38028, 0.39527, 0.48861, 0.50728, 0.73033, 0.85473, 1.16307, 1.25107, 1.36916, 1.71860, 1.62942, 1.64006, 1.56741, 1.68357,
                2.17731, 2.02050, 1.54983, -0.10710, -0.10147, -0.16993, -0.24501, -0.30369, -0.34193, -0.38778, -0.38931, -0.35031, -0.26464,
                -0.15800, -0.04917, 0.05443, 0.14666, 0.22691, 0.29341, 0.34436, 0.38820, 0.41754, 0.44530, 0.46284, 0.47851, 0.49076, 0.49924,
                0.50773, 0.51287, 0.51686, 0.52085, 0.52347, 0.52517, 0.52687, 0.52857, 0.52905, 0.52950, 0.52995, 0.53040, 0.53046, 0.53044,
                0.53041, 0.53038, 0.53035, 0.53019, 0.53002, 0.52985, 0.52968, 0.52951, 0.52938, 0.52931, 0.52924, 0.52917, 0.52909, 0.52902,
                0.52896, 0.52907, 0.52918, 0.52929, 0.52940, 0.52951, 0.52962, 0.52973, 0.52997, 0.53028, 0.53059, 0.53090, 0.53121, 0.53152,
                0.53183, 0.53214, 0.53248, 0.53294, 0.53340, 0.53386, 0.53432, 0.53478, 0.53524, 0.53570, 0.53616, 0.53662, 0.53713, 0.53770,
                0.53826, 0.53883, 0.53940, 0.53996, 0.54053, 0.54110, 0.54166, 0.54223, 0.54280, 0.54336, 0.54389, 0.54442, 0.54495, 0.54548,
                0.54601, 0.54654, 0.54708, 0.54761, 0.54814, 0.54867, 0.54920, 0.54973, 0.55026, 0.55080, 0.55133, 0.55186, 0.55240, 0.55293,
                0.55346, 0.55400, 0.55453, 0.55507, 0.55560, 0.55613, 0.55667, 0.55720, 0.55773, 0.55822, 0.55857, 0.55892, 0.55926, 0.55961,
                0.55995, 0.56030, 0.56064, 0.56099, 0.56133, 0.56168, 0.56202, 0.56237, 0.56271, 0.56306, 0.56341, 0.56375, 0.56410 };


        double[] tau_300 = { 1.00532, 1.00123, 0.99331, 0.98560, 0.97845, 0.97164, 0.96499, 0.95848, 0.95214, 0.94588, 0.93972, 0.93375,
                0.92777, 0.92207, 0.91631, 0.91080, 0.90522, 0.89986, 0.89436, 0.88912, 0.88362, 0.87829, 0.87274, 0.86695, 0.86097, 0.85443,
                0.85142, 0.84908, 0.84592, 0.84239, 0.83875, 0.83507, 0.83151, 0.82824, 0.82546, 0.82344, 0.82226, 0.82009, 0.81552, 1.02365,
                0.96226, 0.90476, 0.78296, 0.73533, 0.84167, 0.57535, 0.52441, 0.52330, 0.53051, 0.49988, 0.60502, 0.56100, 0.67259, 0.79129,
                0.83930, 0.98790, 1.06640, 1.30683, 1.53985, 1.39945, 1.54926, 1.91224, 2.14972, 2.03503, 1.97128, 1.90229, 1.85997, 2.23083,
                1.38440, 0.63710, 0.07400, -0.05746, -0.10645, -0.06807, -0.00096, 0.21451, 0.39019, 0.51418, 0.59192, 0.64115, 0.67451,
                0.69734, 0.70967, 0.71999, 0.72474, 0.72895, 0.72971, 0.73048, 0.72949, 0.72806, 0.72647, 0.72356, 0.72065, 0.71773, 0.71410,
                0.71047, 0.70685, 0.70318, 0.69947, 0.69575, 0.69204, 0.68834, 0.68466, 0.68099, 0.67731, 0.67364, 0.67011, 0.66668, 0.66325,
                0.65983, 0.65640, 0.65302, 0.65000, 0.64697, 0.64395, 0.64093, 0.63790, 0.63488, 0.63230, 0.62981, 0.62732, 0.62483, 0.62234,
                0.61985, 0.61736, 0.61518, 0.61324, 0.61129, 0.60935, 0.60740, 0.60546, 0.60351, 0.60157, 0.59972, 0.59825, 0.59677, 0.59529,
                0.59382, 0.59234, 0.59086, 0.58938, 0.58791, 0.58643, 0.58522, 0.58419, 0.58316, 0.58214, 0.58111, 0.58008, 0.57906, 0.57803,
                0.57701, 0.57598, 0.57495, 0.57413, 0.57353, 0.57293, 0.57233, 0.57173, 0.57112, 0.57052, 0.56992, 0.56932, 0.56872, 0.56811,
                0.56751, 0.56691, 0.56646, 0.56608, 0.56569, 0.56531, 0.56492, 0.56454, 0.56416, 0.56377, 0.56339, 0.56300, 0.56262, 0.56223,
                0.56185, 0.56146, 0.56108, 0.56099, 0.56090, 0.56082, 0.56073, 0.56064, 0.56056, 0.56047, 0.56039, 0.56030, 0.56022, 0.56013,
                0.56004, 0.55996, 0.55987, 0.55979, 0.55970, 0.55962 };
        #endregion

        /// <summary>
        /// Конструктор по умолчанию
        /// </summary>
        public RiverEmpty1XDCircle() : this(new RiverEmptyParamsCircle()) { }

        public RiverEmpty1XDCircle(RiverEmptyParamsCircle p) : base(p, TypeTask.streamX1D)
        {
            name = "Прокси для задачи - размыв под цилиндром";
            Version = "River2D 26.12.2024";
        }
        /// <summary>
        /// Конфигурация задачи по умолчанию (тестовые задачи)
        /// </summary>
        /// <param name="testTaskID">номер задачи по умолчанию</param>
        public override void DefaultCalculationDomain(uint testTaskID = 0) 
        {
            // форма обтекаемого тела
            MEM.Alloc(NNb, ref fxB, "fxB");
            MEM.Alloc(NNb, ref fyB, "fyB");
            
            double dx = 1.0 / (NNb - 1);
            for (uint i = 0; i < NNb; i++)
            {
                double xi = dx * i;
                fxB[i] = 1 + RC * Math.Cos(-2 * Math.PI * xi - Math.PI / 2);
                fyB[i] = RC + RC * Math.Sin(-2 * Math.PI * xi - Math.PI / 2);
            }
            MEM.Alloc(Params.CountKnots, ref x);
            MEM.Alloc(Params.CountKnots, ref zeta0);
            double shift = _x[0];
            dx = (_x[_x.Length - 1] - _x[0]) / (Params.CountKnots - 1);
            for (int i = 0; i < x.Length; i++)
            {
                x[i] = i * dx;
                zeta0[i] = 0;
            }
            for (int i = 0; i < _x.Length; i++)
                _x[i] = _x[i] - shift;
            
            double[][] taus = { tau_0, tau_90, tau_150, tau_300 };
            pole = new Field3D("test", taus, _x, _time);

            
            MEM.Alloc(x.Length, ref Eta, 4 * RC);
            mesh = TapeMeshGenerator.CreateMesh(x, zeta0, Eta);
            base.Set(mesh, algebra);
            eTaskReady = ETaskStatus.TaskReady;
        }
        /// <summary>
        /// Установка новых отметок дна
        /// </summary>
        /// <param name="zeta"></param>
        public override void SetZeta(double[] zeta, EBedErosion bedErosion)
        {
            base.SetZeta(zeta, bedErosion);
            mesh = TapeMeshGenerator.CreateMesh(x, zeta0, Eta);
        }
        /// <summary>
        /// Расчет полей глубины и скоростей на текущем шаге по времени
        /// </summary>
        public override void SolverStep()
        {
            base.SolverStep();
            MEM.Alloc(x.Length, ref tauX);
            MEM.Alloc(x.Length, ref Velosity);
            for (int i = 0; i < x.Length; i++)
                tauX[i] = pole.GetValue(x[i], time);
            for (int i = 0; i < x.Length; i++)
                Velosity[i] = Math.Sign(tauX[i]) * Math.Sqrt(Math.Abs(tauX[i]) / rho_w);

        }
        bool flagPrint = true;
        /// <summary>
        /// Формирование данных для отрисовки связанных с сеткой IMesh со сороны задачи
        /// </summary>
        /// <param name="sp">контейнер данных</param>
        public override void AddMeshPolesForGraphics(ISavePoint sp)
        {
            double[] rezult = null;
            TapeMeshGenerator.Convert2DFrom1D(ref rezult, Eta);
            sp.Add("Глубина потока", rezult);
            if (flagPrint == true)
            {
                sp.AddCurve("Труба", fxB, fyB);
                sp.AddCurve("Дно - эксперимент 0 c", _x, _z0);
                sp.AddCurve("Дно - эксперимент 90 c", _x, _z90);
                sp.AddCurve("Дно - эксперимент 150 c", _x, _z150);
                sp.AddCurve("Дно - эксперимент 300 c", _x, _z300);
                flagPrint = false;
            }
            sp.AddCurve("Средняя скорость потока", x, Velosity);
            sp.AddCurve("Придонные касательные напряжения", x, tauX);
        }

        /// <summary>
        /// Получение полей придонных касательных напряжений и давления/свободной поверхности по контексту задачи
        /// усредненных на конечных элементах
        /// </summary>
        /// <param name="tauX">придонное касательное напряжение по х</param>
        /// <param name="tauY">придонное касательное напряжение по у</param>
        /// <param name="P">придонных давления/свободная поверхности потока, по контексту задачи</param>
        public override void GetTau(ref double[] tauX, ref double[] tauY, ref double[] P, ref double[][] CS, StressesFlag sf = StressesFlag.Nod)
        {
            try
            {
                MEM.Alloc(x.Length, ref tauX);
                MEM.Copy(ref tauX, this.tauX);
                CS = null;
                tauY = null;
                P = null;
            }
            catch (Exception ex)
            {
                Logger.Instance.Exception(ex);
            }
        }
        /// <summary>
        /// Создает экземпляр класса
        /// </summary>
        /// <returns></returns>
        public override IRiver Clone()
        {
            return new RiverEmpty1XDCircle(Params);
        }

    }
}
